<%@ CodeTemplate Src="CommonTemplateCode.cs" Inherits="ManagedFusion.Templates.CommonTemplateCode" Language="C#" TargetLanguage="C#" Debug="False" Description="Entity Generator" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.ViewSchema" Category="Connection" Description="Table Object should be based on." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>

<%@ Import Namespace="SchemaExplorer" %>
<%
	string name = SourceTable.Name;
	string today = DateTime.Now.ToShortDateString();
	string collectionClassName = GetCollectionClassName(SourceTable.Name);
	string className = GetClassName(SourceTable.Name);

	// Collection of all columns in the table.
	ViewColumnSchemaCollection cols = SourceTable.Columns;
%>
/*
 * 	Template:		This code was generated by the <%= CompanyName %> [<%= CompanyUrl %>] Data Layer Template.
 * 	Created On :	<%= today %>
 * 	Remarks:		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Diagnostics;
using System.Text;
using System.Threading;
using System.Security.Permissions;
using System.Xml;
using System.Xml.Serialization;

namespace LAWeightLoss.Data
{
	[DataObject(true)]
	public partial class <%= className %>
	{
		#region Static Methods
		
		#region Common Methods

		private static List<<%= className %>> FillCollection (SqlCommand command)
		{
			List<<%= className %>> list = new List<<%= className %>>();
			
			try
			{
				// prepare the command on the database
				command.Prepare();
				
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						int[] order = new int[<%= cols.Count %>];
<% for (int x=0; x < cols.Count; x++) { %>
						order[<%= x %>] = reader.GetOrdinal("<%= cols[x].Name %>");
<% } %>

						while (reader.Read()) 
						{
							<%= className %> entity = new <%= className %>();
<% for (int x=0; x < cols.Count; x++) { %>
							entity.<%= GetMemberVariableName(cols[x]) %> = reader.IsDBNull(<%= x %>) ? <%= GetCSDefaultByType(cols[x]) %> :  reader.<%= GetReaderMethodByType(cols[x]) %>(order[<%= x %>]); // <%= cols[x].Name %>
<% } %>

							// add to list
							list.Add(entity);
						}
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				command.Connection.Close();
			}
					
			return list;
		}
	
		private static <%= className %> FillEntity (SqlCommand command)
		{
			<%= className %> entity = null;
			
			try
			{
				// prepare the command on the database
				command.Prepare();
				
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						reader.Read();
						entity = new <%= className %>();
<% for (int x=0; x < cols.Count; x++) { %>
						entity.<%= GetMemberVariableName(cols[x]) %> = reader.IsDBNull(<%= x %>) ? <%= GetCSDefaultByType(cols[x]) %> :  reader.<%= GetReaderMethodByType(cols[x]) %>(reader.GetOrdinal("<%= cols[x].Name %>"));
<% } %>
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				if (entity == null) 
					entity = new <%= className %>();
					
				command.Connection.Close();
			}
					
			return entity;
		}
		
		#endregion
		
		#region Get List
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static List<<%= className %>> GetList (string where, string orderBy) 
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select * from [<%= SourceTable.Name %>] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["<%= ConnectionStringName %>"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillCollection(command);
				}
			}
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static List<<%= className %>> GetList (string where)
		{
			return GetList(where, String.Empty);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, true)]
		public static List<<%= className %>> GetList ()
		{
			return GetList(String.Empty, String.Empty);
		}
		
		#endregion
		
		#region Get First
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <%= className %> GetFirst (string where, string orderBy) 
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select top 1 * from [<%= SourceTable.Name %>] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["<%= ConnectionStringName %>"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillEntity(command);
				}
			}
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <%= className %> GetFirst (string where)
		{
			return GetFirst(where, String.Empty);
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <%= className %> GetFirst ()
		{
			return GetFirst(String.Empty, String.Empty);
		}
		
		#endregion

		#endregion
		
		#region Column Variables
				
<% for (int x=0; x < SourceTable.Columns.Count; x++) { %>
		/// <summary>
		/// Column <%=SourceTable.Columns[x].Name%> : <%=SourceTable.Columns[x].Description%>
		/// </summary>
		private <%= GetCSType(SourceTable.Columns[x]) %> <%= GetMemberVariableName(SourceTable.Columns[x]) %> = <%= GetCSDefaultByType(SourceTable.Columns[x]) %>;
	
<% } %>
		
		#endregion
		
		#region Constructor
		
		private <%= className %> ()
		{
		}
		
		#endregion
		
		#region Properties
		
<% for (int x = 0; x < cols.Count; x++) { 
	if (cols[x].Name == "Status"
		|| cols[x].Name == "SynchronizationLevel") 
		continue;
%>
		/// <summary>Gets the <%= GetPropertyName(cols[x].Name) %> value for the column.</summary>
		/// <remarks><%=cols[x].Description%></remarks>
		/// <value>This type is <%=cols[x].NativeType%></value>
		[ReadOnly(true)]
		[Description("<%=cols[x].Description%>")]
		[DataObjectField(false, false, false)]
		public <%= GetCSType(cols[x])%> <%= GetPropertyName(cols[x].Name) %>
		{
			get { return this.<%= GetMemberVariableName(cols[x]) %>; }
		}
		
<% } %>
<% if (SourceTable.Columns.Contains("Status")) { %>
		/// <summary>Gets the Status value for the column.</summary>
		/// <remarks>The status of a row indicates the rows current state in the database.</remarks>
		/// <value>This type is tinyint</value>
		[ReadOnly(true)]
		[Description("The status of a row indicates the rows current state in the database.")]
		[DataObjectField(false, false, false)]
		public Status Status
		{
			get { return (Status)this._status; }
		}
<% } %>
		
<% if (SourceTable.Columns.Contains("SynchronizationLevel")) { %>
		/// <summary>Gets the SynchronizationLevel value for the column.</summary>
		/// <remarks>The synchronization level of a row indicates if the row has been replicated.</remarks>
		/// <value>This type is tinyint</value>
		[ReadOnly(true)]
		[Description("The synchronization level of a row indicates if the row has been replicated.")]
		[DataObjectField(false, false, false)]
		public SynchronizationLevel SynchronizationLevel
		{
			get { return (SynchronizationLevel)this._synchronizationLevel; }
		}
<% } %>

		#region IsColumnNull
		
<% for (int x=0; x < cols.Count; x++) { 
	// only write method if it allows nulls
	if (cols[x].AllowDBNull) { %>
		///<summary>Indicates if the <%=cols[x].Name%> value is null.</summary>		
		///<returns>true if <%=cols[x].Name%> has a null value; otherwise, false.</returns>
		public virtual bool Is<%=GetPropertyName(cols[x].Name)%>Null
		{
			get { return this.<%= GetMemberVariableName(cols[x]) %> == <%= GetCSDefaultByType(cols[x]) %>; }
		}
<%	} 
} %>	
		
		#endregion

		#endregion
	}
	
	#region <%= className %> Columns
	
	public enum <%= className %>Column
	{
<% for (int i = 0; i < cols.Count; i++) { %>
		<%= GetPropertyName(cols[i].Name) %><% if(i < cols.Count -1) { %>,<% } %>
<% } %>
	}
	
	#endregion
}