/*
 * 	Template:		This code was generated by the ManagedFusion [http://www.managedfusion.com] Data Layer Template.
 * 	Created On :	11/22/2006
 * 	Remarks:		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Diagnostics;
using System.Text;
using System.Threading;
using System.Security.Permissions;
using System.Xml;
using System.Xml.Serialization;

namespace ManagedFusion.Data.SqlServer2000
{
	[DataObject(true)]
	public partial class SectionContainerLink : ITable<int>
	{
		#region Static Methods
		
		#region Common Methods

		protected static SectionContainerLinkCollection FillCollection (SqlCommand command)
		{
			SectionContainerLinkCollection list = new SectionContainerLinkCollection();
			
			try
			{
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						int[] order = new int[4];
						order[0] = reader.GetOrdinal("SectionID");
						order[1] = reader.GetOrdinal("ContainerID");
						order[2] = reader.GetOrdinal("SortOrder");
						order[3] = reader.GetOrdinal("Position");

						while (reader.Read()) 
						{
							SectionContainerLink entity = new SectionContainerLink();
							entity._sectionID = reader.IsDBNull(0) ? 0 :  reader.GetInt32(order[0]); // SectionID
							entity._containerID = reader.IsDBNull(1) ? 0 :  reader.GetInt32(order[1]); // ContainerID
							entity._sortOrder = reader.IsDBNull(2) ? 0 :  reader.GetInt32(order[2]); // SortOrder
							entity._position = reader.IsDBNull(3) ? 0 :  reader.GetInt32(order[3]); // Position

							// add to list
							list.Add(entity);
						}
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				command.Connection.Close();
			}
					
			return list;
		}
	
		protected static SectionContainerLink FillEntity (SqlCommand command)
		{
			SectionContainerLink entity = null;
			
			try
			{
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						reader.Read();
						entity = new SectionContainerLink();
						entity._sectionID = reader.IsDBNull(0) ? 0 :  reader.GetInt32(reader.GetOrdinal("SectionID"));
						entity._containerID = reader.IsDBNull(1) ? 0 :  reader.GetInt32(reader.GetOrdinal("ContainerID"));
						entity._sortOrder = reader.IsDBNull(2) ? 0 :  reader.GetInt32(reader.GetOrdinal("SortOrder"));
						entity._position = reader.IsDBNull(3) ? 0 :  reader.GetInt32(reader.GetOrdinal("Position"));
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				if (entity == null) 
					entity = new SectionContainerLink();
					
				command.Connection.Close();
			}
					
			return entity;
		}
		
		#endregion
		
		#region Get List
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static SectionContainerLinkCollection GetList (string where, string orderBy)
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select * from [SectionContainerLink] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillCollection(command);
				}
			}
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static SectionContainerLinkCollection GetList (string where)
		{
			return GetList(where, String.Empty);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, true)]
		public static SectionContainerLinkCollection GetList ()
		{
			return GetList(String.Empty, String.Empty);
		}
		
		#endregion
		
		#region Get First
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static SectionContainerLink GetFirst (string where, string orderBy)
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select top 1 * from [SectionContainerLink] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillEntity(command);
				}
			}
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static SectionContainerLink GetFirst (string where)
		{
			return GetFirst(where, String.Empty);
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static SectionContainerLink GetFirst ()
		{
			return GetFirst(String.Empty, String.Empty);
		}
		
		#endregion
		
		#region Get Latest
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static SectionContainerLink GetLatest (string where)
		{
			return GetFirst(where, "ModifiedDT desc");
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static SectionContainerLink GetLatest ()
		{
			return GetLatest(String.Empty);
		}
		
		#endregion
		
		#region Get By Foreign Key
		
		#endregion
		
		#region Get By Index
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static SectionContainerLink GetBySectionIDAndContainerID(int sectionID, int containerID, string orderBy)
		{
			return GetFirst("SectionID = " + sectionID + " and ContainerID = " + containerID + "", orderBy);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static SectionContainerLink GetBySectionIDAndContainerID(int sectionID, int containerID)
		{
			return GetBySectionIDAndContainerID(sectionID, containerID, String.Empty);
		}
		
		#endregion

		#region Insert
		
		protected static bool InsertOrUpdate (int sectionID, int containerID, int sortOrder, int position)		
		{
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = "ManagedFusion_SectionContainerLink";
					command.CommandType = CommandType.StoredProcedure;
					
					command.Parameters.AddWithValue("@SectionID", sectionID);
					command.Parameters.AddWithValue("@ContainerID", containerID);
					command.Parameters.AddWithValue("@SortOrder", sortOrder);
					command.Parameters.AddWithValue("@Position", position);
					
					bool success = false;
					
					try
					{
						connection.Open();
						command.ExecuteNonQuery();
					
						success = true;
					} catch (Exception exc) {
						Debug.WriteLine(exc);
						
						success = false;
					} finally {
						connection.Close();
					}
					
					return success;
				}
			}
		}
		
		[DataObjectMethod(DataObjectMethodType.Insert, false)]
		public static bool Insert (int sectionID, int containerID, int sortOrder, int position)
		{
			return InsertOrUpdate(
				sectionID,
				containerID,
				sortOrder,
				position
			);
		}
		
		[DataObjectMethod(DataObjectMethodType.Insert, true)]
		public static bool Insert (SectionContainerLink entity)
		{
			entity.AcceptChanges();
			return InsertOrUpdate(
				entity.SectionID, 
				entity.ContainerID, 
				entity.SortOrder, 
				entity.Position
			);
		}
		
		#endregion
		
		#region Update
		
		[DataObjectMethod(DataObjectMethodType.Update, false)]
		public static bool Update (int sectionID, int containerID, int sortOrder, int position)
		{
			return InsertOrUpdate(
				sectionID,
				containerID,
				sortOrder,
				position
			);
		}
		
		[DataObjectMethod(DataObjectMethodType.Update, true)]
		public static bool Update (SectionContainerLink entity)
		{
			entity.AcceptChanges();
			return InsertOrUpdate(
				entity.SectionID, 
				entity.ContainerID, 
				entity.SortOrder, 
				entity.Position
				);
		}
		
		#endregion
		
		#region Delete
		
		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public static bool Delete (SectionContainerLink entity)
		{
			entity.AcceptChanges();
			return Delete(
				entity.SectionID, 
				entity.ContainerID
			);
		}

		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public static bool Delete (int sectionID, int containerID)
		{
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = "ManagedFusion_SectionContainerLink_Delete";
					command.CommandType = CommandType.StoredProcedure;
					
					command.Parameters.AddWithValue("@SectionID", sectionID);
					command.Parameters.AddWithValue("@ContainerID", containerID);
					
					bool success = false;
					
					try
					{
						connection.Open();
						command.ExecuteNonQuery();
					
						success = true;
					} catch (Exception exc) {
						Debug.WriteLine(exc);
						
						success = false;
					} finally {
						connection.Close();
					}
					
					return success;
				}
			}
		}
		
		#endregion

		#endregion
		
		#region Column Variables
		
		#region Primary key(s)
		
		/// <summary>			
		/// Column SectionID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SectionContainerLink"</remarks>
		private int _sectionID = 0;

		/// <summary>			
		/// Column ContainerID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SectionContainerLink"</remarks>
		private int _containerID = 0;

		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Column SortOrder : 
		/// </summary>
		private int _sortOrder = 0;

		/// <summary>
		/// Column Position : 
		/// </summary>
		private int _position = 0;

		#endregion
		
		#endregion
		
		#region Constructor
		
		///<summary>
		/// Creates a new <see cref="SectionContainerLink"/> instance.
		///</summary>
		///<param name="SectionID"></param>
		///<param name="ContainerID"></param>
		///<param name="SortOrder"></param>
		///<param name="Position"></param>
		public SectionContainerLink (int sectionID, int containerID, int sortOrder, int position)
		{
			this._isMarkedForDeletion = false;
			this._isDirty = true;
			this._isNew = true;
			this._autoUpdate = true;
				
			this._sectionID = sectionID;
			this._containerID = containerID;
			this._sortOrder = sortOrder;
			this._position = position;
		}
		
		public SectionContainerLink ()
		{
			this._isMarkedForDeletion = false;
			this._isDirty = false;
			this._isNew = true;
			this._autoUpdate = true;
		}
		
		#endregion
		
		#region Properties
		
		#region Foreign Keys
		
		#endregion
		
		/// <summary>Gets the SectionID value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is int</value>
		[ReadOnly(true)]
		[Description("")]
		[DataObjectField(true, false, false, 4)]
		public int SectionID
		{
			get { return this._sectionID; }
		}
		
		/// <summary>Gets the ContainerID value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is int</value>
		[ReadOnly(true)]
		[Description("")]
		[DataObjectField(true, false, false, 4)]
		public int ContainerID
		{
			get { return this._containerID; }
		}
		
		/// <summary>Gets or sets the SortOrder value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is int</value>
		[Description("")]
		[DataObjectField(false, false, false, 4)]
		public int SortOrder
		{
			get { return this._sortOrder; }
			set
			{
				if (_sortOrder == value)
					return;
					
				_sortOrder = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Position value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is int</value>
		[Description("")]
		[DataObjectField(false, false, false, 4)]
		public int Position
		{
			get { return this._position; }
			set
			{
				if (_position == value)
					return;
					
				_position = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		

		private bool _autoUpdate = true;
		/// <summary>True if the entity should commit changes as soon as they are made.</summary>
		[Browsable(false)]
		public bool AutoUpdate
		{
			get { return this._autoUpdate; }
			set { _autoUpdate = value; }
		}

		private bool _isMarkedForDeletion = false;
		/// <summary>Gets if the object has been <see cref="MarkToDelete"/>.</summary>
		[Browsable(false)]
		public bool IsMarkedForDeletion
		{
			get { return this._isMarkedForDeletion; }
		}

		private bool _isDirty = false;
		/// <summary>Indicates if the object has been modified from its original state.</summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[Browsable(false)]
		public bool IsDirty
		{
			get { return this._isDirty; }
		}

		private bool _isNew = false;
		/// <summary>Indicates if the object is new.</summary>
		///<value>True if objectis new; otherwise False;</value>
		[Browsable(false)]
		public bool IsNew
		{
			get { return this._isNew; }
		}

		/// <summary>Gets a value indicating if AutoUpdate is allowed on this entity.</summary>
		private bool AllowAutoUpdate 
		{
			get { return (!IsNew && !IsMarkedForDeletion) && AutoUpdate; }
		}

		#endregion
		
		#region Methods
		
		internal void Merge (SectionContainerLink entity)
		{
			this._sectionID = entity._sectionID;
			this._containerID = entity._containerID;
			this._sortOrder = entity._sortOrder;
			this._position = entity._position;
		}

		/// <summary>Begin the update process.</summary>
		public void BeginUpdate()
		{
			this.AutoUpdate = false;
		}
		
		/// <summary>End the update process and commit changes.</summary>
		public void EndUpdate()
		{
			this.EndUpdate(true);
		}
		
		/// <summary>End the update process</summary>
		public void EndUpdate(bool commit)
		{
			this.AutoUpdate = true;
			
			if (commit)
				this.CommitChanges();
		}
		
		/// <summary>Accepts the changes made to this object by setting each flags to false.</summary>
		internal void AcceptChanges()
		{
			this._isMarkedForDeletion = false;
			this._isDirty = false;
			this._isNew = false;
		}
		
		///<summary>Currently not supported.</summary>
		public void CancelChanges()
		{
			throw new NotSupportedException("Cancel changes is not currently supported.");
		}
		
		///<summary>Delete this entity.</summary>
		public void Delete()
		{
			this._isMarkedForDeletion = true;
			
			if (!IsNew && AutoUpdate) Delete(this);
		}
		
		#endregion
		
		#region ITable<int> Members

		[DataObjectField(true, true, false)]
		int ITable<int>.PrimaryKey
		{
			get { return _sectionID; }
		}

		/// <summary>Commit the changes to the database.</summary>
		public void CommitChanges()
		{
			if (this.IsNew)
				Insert(this);
			
			else if (this.IsMarkedForDeletion)
				Delete(this);
				
			else if (this.IsDirty)
				Update(this);
		}

		#endregion
	}
	
	#region SectionContainerLink Columns
	
	public enum SectionContainerLinkColumn
	{
		/// <summary></summary>
		SectionID,
 
		/// <summary></summary>
		ContainerID,
 
		/// <summary></summary>
		SortOrder,
 
		/// <summary></summary>
		Position 
	}
	
	#endregion
	
	#region SectionContainerLink Collection
	
	public class SectionContainerLinkCollection : TableCollection<int, SectionContainerLink>
	{
	}
	
	#endregion
}