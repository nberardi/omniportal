<%@ CodeTemplate Src="CommonTemplateCode.cs" Inherits="ManagedFusion.Templates.CommonTemplateCode" Language="C#" TargetLanguage="C#" Debug="True" Description="Entity Generator" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Connection" Description="Table Object should be based on." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Design" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%
	string name = SourceTable.Name;
	string today = DateTime.Now.ToShortDateString();
	string collectionClassName = GetCollectionClassName(SourceTable.Name);
	string className = GetClassName(SourceTable.Name);
	bool generateEnum = EnumTables != null && EnumTables.Contains(name);
	bool generateTable = SourceTables != null && SourceTables.Contains(name);
	
	ColumnSchemaCollection cols = SourceTable.Columns;
	MemberColumnSchemaCollection pkeys = SourceTable.PrimaryKey.MemberColumns;
	TableKeySchemaCollection fkeys = SourceTable.ForeignKeys;
	IndexSchemaCollection indexes = SourceTable.Indexes;
%>
/*
 * 	Template:		This code was generated by the <%= CompanyName %> [<%= CompanyUrl %>] Data Layer Template.
 * 	Created On :	<%= today %>
 * 	Remarks:		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

using System;
<% if (this.GenerateTables && generateTable) { %>
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Diagnostics;
using System.Text;
using System.Threading;
using System.Security.Permissions;
using System.Xml;
using System.Xml.Serialization;
<% } %>

namespace <%= Namespace %>
{
<% if (this.GenerateTables && generateTable) { %>
	[DataObject(true)]
	public partial class <%= className %> : ITable<<%= GetCSType(SourceTable.PrimaryKey.MemberColumns[0]) %>>
	{
		#region Static Methods
		
		#region Common Methods

		protected static <%= collectionClassName %> FillCollection (SqlCommand command)
		{
			<%= collectionClassName %> list = new <%= collectionClassName %>();
			
			try
			{
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						int[] order = new int[<%= cols.Count %>];
<% for (int x=0; x < cols.Count; x++) { %>
						order[<%= x %>] = reader.GetOrdinal("<%= cols[x].Name %>");
<% } %>

						while (reader.Read()) 
						{
							<%= className %> entity = new <%= className %>();
<% for (int x=0; x < cols.Count; x++) { %>
							entity.<%= GetMemberVariableName(cols[x]) %> = reader.IsDBNull(<%= x %>) ? <%= GetCSDefaultByType(cols[x]) %> :  reader.<%= GetReaderMethodByType(cols[x]) %>(order[<%= x %>]); // <%= cols[x].Name %>
<% } 
if (SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Guid) { %>

							entity._isMarkedForDeletion = false;
							entity._isDirty = false;
							entity._isNew = entity.<%= GetMemberVariableName(SourceTable.PrimaryKey.MemberColumns[0].Name) %> == <%= GetCSDefaultByType(SourceTable.PrimaryKey.MemberColumns[0]) %>;
							entity._autoUpdate = true;	
<% } %>

							// add to list
							list.Add(entity);
						}
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				command.Connection.Close();
			}
					
			return list;
		}
	
		protected static <%= className %> FillEntity (SqlCommand command)
		{
			<%= className %> entity = null;
			
			try
			{
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						reader.Read();
						entity = new <%= className %>();
<% for (int x=0; x < cols.Count; x++) { %>
						entity.<%= GetMemberVariableName(cols[x]) %> = reader.IsDBNull(<%= x %>) ? <%= GetCSDefaultByType(cols[x]) %> :  reader.<%= GetReaderMethodByType(cols[x]) %>(reader.GetOrdinal("<%= cols[x].Name %>"));
<% } 
if (SourceTable.PrimaryKey.MemberColumns[0].DataType == DbType.Guid) { %>

						entity._isMarkedForDeletion = false;
						entity._isDirty = false;
						entity._isNew = entity.<%= GetMemberVariableName(SourceTable.PrimaryKey.MemberColumns[0].Name) %> == <%= GetCSDefaultByType(SourceTable.PrimaryKey.MemberColumns[0]) %>;
						entity._autoUpdate = true;	
<% } %>
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				if (entity == null) 
					entity = new <%= className %>();
					
				command.Connection.Close();
			}
					
			return entity;
		}
		
		#endregion
		
		#region Get List
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <%= collectionClassName %> GetList (string where, string orderBy)
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select * from [<%= SourceTable.Name %>] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["<%= ConnectionStringName %>"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillCollection(command);
				}
			}
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <%= collectionClassName %> GetList (string where)
		{
			return GetList(where, String.Empty);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, true)]
		public static <%= collectionClassName %> GetList ()
		{
			return GetList(String.Empty, String.Empty);
		}
		
		#endregion
		
		#region Get First
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <%= className %> GetFirst (string where, string orderBy)
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select top 1 * from [<%= SourceTable.Name %>] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["<%= ConnectionStringName %>"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillEntity(command);
				}
			}
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <%= className %> GetFirst (string where)
		{
			return GetFirst(where, String.Empty);
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <%= className %> GetFirst ()
		{
			return GetFirst(String.Empty, String.Empty);
		}
		
		#endregion
		
		#region Get Latest
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <%= className %> GetLatest (string where)
		{
			return GetFirst(where, "ModifiedDT desc");
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <%= className %> GetLatest ()
		{
			return GetLatest(String.Empty);
		}
		
		#endregion
		
		#region Get By Foreign Key
		
<% for(int i = 0; i < fkeys.Count; i++) {
	List<string> names = new List<string>(fkeys[i].ForeignKeyMemberColumns.Count);
	List<string> queryNames = new List<string>(fkeys[i].ForeignKeyMemberColumns.Count);
	MemberColumnSchemaCollection columns = fkeys[i].ForeignKeyMemberColumns;
	MemberColumnSchemaCollection pcolumns = fkeys[i].PrimaryKeyMemberColumns;
	
	string fcollectionClassName = GetCollectionClassName(fkeys[i].PrimaryKeyTable.Name);
	string fclassName = GetClassName(fkeys[i].PrimaryKeyTable.Name);
	bool oneToMany = IsRelationOneToMany(fkeys[i]);
	bool isPrimaryKey = true;
	
	foreach(MemberColumnSchema s in pcolumns) {
		isPrimaryKey = isPrimaryKey && s.IsPrimaryKeyMember;
		names.Add(s.Name);
	}
	
	// if there are primary keys in the foreign key then it will be picked up by the primary key method below
	if (isPrimaryKey)
		continue;
	
	string methodName1 = String.Join("And", names.ToArray());
	
	// clear the names from the list
	names.Clear();
	
	foreach(MemberColumnSchema s in columns) {
		names.Add(s.Name);
	}
	
	string methodName2 = String.Join("And", names.ToArray());%>
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <% if (oneToMany) { %><%= fclassName %><% } else { %><%= fcollectionClassName %><% } %> GetBy<%= methodName2 %>(<% for (int j = 0; j < columns.Count; j++) { %><%= GetCSType(columns[j]) %> <%= GetCamelCaseName(columns[j].Name) %>, <% } %>string orderBy)
		{
			return <% if (oneToMany) { %>GetFirst<% } else { %>GetList<% } %>("<% for (int j = 0; j < columns.Count; j++) { %><%= columns[j].Name %> = <% if (columns[j].DataType != DbType.Int32) { %>'<% } %>" + <%= GetCamelCaseName(columns[j].Name) %><% if (columns[j].DataType == DbType.DateTime) { %>.ToString("yyyy-MM-dd HH:mm:ss.fff")<% } %> + "<% if (columns[j].DataType != DbType.Int32) { %>'<% } %><% if (j < columns.Count -1) { %> and <% } %><% } %>", orderBy);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <% if (oneToMany) { %><%= fclassName %><% } else { %><%= fcollectionClassName %><% } %> GetBy<%= methodName2 %>(<% for (int j = 0; j < columns.Count; j++) { %><%= GetCSType(columns[j]) %> <%= GetCamelCaseName(columns[j].Name) %><% if (j < columns.Count -1) { %>, <% } } %>)
		{
			return GetBy<%= methodName2 %>(<% for (int j = 0; j < columns.Count; j++) { %><%= GetCamelCaseName(columns[j].Name) %>, <% } %>String.Empty);
		}
		
<% } %>
		#endregion
		
		#region Get By Index
		
<% for (int i = 0; i < indexes.Count; i++) { 
	List<string> names = new List<string>(indexes[i].MemberColumns.Count);
	List<string> queryNames = new List<string>(indexes[i].MemberColumns.Count);
	
	foreach(MemberColumnSchema s in indexes[i].MemberColumns)
		names.Add(s.Name);
			
	string methodName = String.Join("And", names.ToArray());%>
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <% if (indexes[i].IsUnique) { %><%= className %><% } else { %><%= collectionClassName %><% } %> GetBy<%= methodName %>(<% for (int j = 0; j < indexes[i].MemberColumns.Count; j++) { %><%= GetCSType(indexes[i].MemberColumns[j]) %> <%= GetCamelCaseName(indexes[i].MemberColumns[j].Name) %>, <% } %>string orderBy)
		{
			return <% if (indexes[i].IsUnique) { %>GetFirst<% } else { %>GetList<% } %>("<% for (int j = 0; j < indexes[i].MemberColumns.Count; j++) { %><%= indexes[i].MemberColumns[j].Name %> = <% if (indexes[i].MemberColumns[j].DataType != DbType.Int32) { %>'<% } %>" + <%= GetCamelCaseName(indexes[i].MemberColumns[j].Name) %><% if (indexes[i].MemberColumns[j].DataType == DbType.DateTime) { %>.ToString("yyyy-MM-dd HH:mm:ss.fff")<% } %> + "<% if (indexes[i].MemberColumns[j].DataType != DbType.Int32) { %>'<% } %><% if (j < indexes[i].MemberColumns.Count -1) { %> and <% } %><% } %>", orderBy);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static <% if (indexes[i].IsUnique) { %><%= className %><% } else { %><%= collectionClassName %><% } %> GetBy<%= methodName %>(<% for (int j = 0; j < indexes[i].MemberColumns.Count; j++) { %><%= GetCSType(indexes[i].MemberColumns[j]) %> <%= GetCamelCaseName(indexes[i].MemberColumns[j].Name) %><% if (j < indexes[i].MemberColumns.Count -1) { %>, <% } } %>)
		{
			return GetBy<%= methodName %>(<% for (int j = 0; j < indexes[i].MemberColumns.Count; j++) { %><%= GetCamelCaseName(indexes[i].MemberColumns[j].Name) %>, <% } %>String.Empty);
		}
		
<% } %>
		#endregion

		#region Insert
		
		protected static bool InsertOrUpdate (<% for (int i = 0; i < cols.Count; i++) { %><%= GetCSType(cols[i]) %> <%= GetCamelCaseName(cols[i].Name) %><% if (i < cols.Count -1) { %>, <% } } %>)		
		{
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["<%= ConnectionStringName %>"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = "<%=ProcedurePrefix + GetPropertyName(name) + InsertUpdateSuffix %>";
					command.CommandType = CommandType.StoredProcedure;
					
					<% for(int i = 0; i < cols.Count; i++) { %>
					command.Parameters.AddWithValue("@<%= cols[i].Name %>", <%= GetCamelCaseName(cols[i].Name) %>);
					<% } %>
					
					bool success = false;
					
					try
					{
						connection.Open();
						command.ExecuteNonQuery();
					
						success = true;
					} catch (Exception exc) {
						Debug.WriteLine(exc);
						
						success = false;
					} finally {
						connection.Close();
					}
					
					return success;
				}
			}
		}
		
		[DataObjectMethod(DataObjectMethodType.Insert, false)]
		public static bool Insert (<% for (int i = 0; i < cols.Count; i++) { %><%= GetCSType(cols[i]) %> <%= GetCamelCaseName(cols[i].Name) %><% if (i < cols.Count -1) { %>, <% } } %>)
		{
			return InsertOrUpdate(
<% for(int i = 0; i < cols.Count; i++) { %>
				<%= GetCamelCaseName(cols[i].Name) %><% if (i < cols.Count -1) { %>,<% } %>
<% } %>
			);
		}
		
		[DataObjectMethod(DataObjectMethodType.Insert, true)]
		public static bool Insert (<%= className %> entity)
		{
			entity.AcceptChanges();
			return InsertOrUpdate(
<% for (int i = 0; i < cols.Count; i++) { %>
				entity.<%= GetPropertyName(cols[i].Name) %><%if (i < cols.Count -1){ %>, <% } %>
<% } %>
			);
		}
		
		#endregion
		
		#region Update
		
		[DataObjectMethod(DataObjectMethodType.Update, false)]
		public static bool Update (<% for (int x=0; x < cols.Count; x++) { %><%= GetCSType(cols[x]) %> <%= GetCamelCaseName(cols[x].Name) %><%if (x < cols.Count -1){%>, <%} } %>)
		{
			return InsertOrUpdate(
<% for(int i = 0; i < cols.Count; i++) { %>
				<%= GetCamelCaseName(cols[i].Name) %><% if (i < cols.Count -1) { %>,<% } %>
<% } %>
			);
		}
		
		[DataObjectMethod(DataObjectMethodType.Update, true)]
		public static bool Update (<%= className %> entity)
		{
			entity.AcceptChanges();
			return InsertOrUpdate(
<% for (int x=0; x < cols.Count; x++) { %>
				entity.<%= GetPropertyName(cols[x].Name) %><%if (x < cols.Count -1){ %>, <% } %>
<% } %>
				);
		}
		
		#endregion
		
		#region Delete
		
		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public static bool Delete (<%= className %> entity)
		{
			entity.AcceptChanges();
			return Delete(
<% for (int i = 0; i < pkeys.Count; i++) { %>
				entity.<%= GetPropertyName(pkeys[i].Name) %><%if (i < pkeys.Count -1){ %>, <% } %>
<% } %>
			);
		}

		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public static bool Delete (<% for (int i = 0; i < pkeys.Count; i++) { %><%= GetCSType(pkeys[i]) %> <%= GetCamelCaseName(pkeys[i].Name) %><% if (i < pkeys.Count -1) { %>, <% } } %>)
		{
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["<%= ConnectionStringName %>"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = "<%=ProcedurePrefix + GetPropertyName(name) + DeleteSuffix %>";
					command.CommandType = CommandType.StoredProcedure;
					
					<% for(int i = 0; i < pkeys.Count; i++) { %>
					command.Parameters.AddWithValue("@<%= pkeys[i].Name %>", <%= GetCamelCaseName(pkeys[i].Name) %>);
					<% } %>
					
					bool success = false;
					
					try
					{
						connection.Open();
						command.ExecuteNonQuery();
					
						success = true;
					} catch (Exception exc) {
						Debug.WriteLine(exc);
						
						success = false;
					} finally {
						connection.Close();
					}
					
					return success;
				}
			}
		}
		
		#endregion

		#endregion
		
		#region Column Variables
		
		#region Primary key(s)
		
<% for(int i=0; i< pkeys.Count; i++) {%>
		/// <summary>			
		/// Column <%= pkeys[i].Name %> : <%= pkeys[i].Description %>
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "<%=SourceTable.Name%>"</remarks>
		private <%= GetCSType(pkeys[i]) %> <%=GetMemberVariableName(pkeys[i])%> = <%= GetCSDefaultByType(pkeys[i]) %>;

<% } %>
		#endregion
		
		#region Non Primary key(s)
		
<% for (int x=0; x < SourceTable.NonPrimaryKeyColumns.Count; x++) { %>
		/// <summary>
		/// Column <%=SourceTable.NonPrimaryKeyColumns[x].Name%> : <%=SourceTable.NonPrimaryKeyColumns[x].Description%>
		/// </summary>
		private <%= GetCSType(SourceTable.NonPrimaryKeyColumns[x]) %> <%= GetMemberVariableName(SourceTable.NonPrimaryKeyColumns[x]) %> = <%= GetCSDefaultByType(SourceTable.NonPrimaryKeyColumns[x]) %>;

<% } %>
		#endregion
		
		#endregion
		
		#region Constructor
		
		///<summary>
		/// Creates a new <see cref="<%=className%>"/> instance.
		///</summary>
<% for (int x=0; x < cols.Count; x++) { %>
		///<param name="<%=GetPropertyName(cols[x].Name) %>"><%=cols[x].Description%></param>
<% } %>
		public <%= className %> (<% for (int i = 0; i < cols.Count; i++) { if (IsIdentityColumn(cols[i])) continue; %><%= GetCSType(cols[i]) %> <%= GetCamelCaseName(cols[i].Name) %><%if (i < cols.Count -1){%>, <%} } %>)
		{
			this._isMarkedForDeletion = false;
			this._isDirty = true;
			this._isNew = true;
			this._autoUpdate = true;
				
<% for (int i = 0; i < cols.Count; i++) { 
	if (IsIdentityColumn(cols[i])) continue; %>
			this.<%= GetMemberVariableName(cols[i]) %> = <%= GetCamelCaseName(cols[i].Name) %>;
<% } %>
		}
		
		public <%= className %> ()
		{
			this._isMarkedForDeletion = false;
			this._isDirty = false;
			this._isNew = true;
			this._autoUpdate = true;
		}
		
		#endregion
		
		#region Properties
		
		#region Foreign Keys
		
<% for(int i = 0; i < fkeys.Count; i++) {
	List<string> names = new List<string>(fkeys[i].ForeignKeyMemberColumns.Count);
	List<string> queryNames = new List<string>(fkeys[i].ForeignKeyMemberColumns.Count);
	MemberColumnSchemaCollection columns = fkeys[i].ForeignKeyMemberColumns;
	MemberColumnSchemaCollection pcolumns = fkeys[i].PrimaryKeyMemberColumns;
	
	string fcollectionClassName = GetCollectionClassName(fkeys[i].PrimaryKeyTable.Name);
	string fclassName = GetClassName(fkeys[i].PrimaryKeyTable.Name);
	bool oneToMany = IsRelationOneToMany(fkeys[i]);
	bool isPrimaryKey = true;
	
	foreach(MemberColumnSchema s in pcolumns) {
		isPrimaryKey = isPrimaryKey && s.IsPrimaryKeyMember;
		names.Add(s.Name);
	}
	
	// if there are primary keys in the foreign key then it will be picked up by the primary key method below
	if (isPrimaryKey)
		continue;
	
	string methodName1 = String.Join("And", names.ToArray());
	
	// clear the names from the list
	names.Clear();
	
	foreach(MemberColumnSchema s in columns) {
		names.Add(s.Name);
	}
	
	string methodName2 = String.Join("And", names.ToArray());%>
		[Browsable(false)]
		public <% if (oneToMany) { %><%= fclassName %><% } else { %><%= fcollectionClassName %><% } %> <%= fclassName %><% if (oneToMany == false) { %>s<% } %>With<%= methodName1 %>For<%= methodName2 %>
		{
			get 
			{
				return <%= fclassName %>.<% if (oneToMany) { %>GetFirst<% } else { %>GetList<% } %>("<% for (int j = 0; j < columns.Count; j++) { %><%= pcolumns[j].Name %> = <% if (columns[j].DataType != DbType.Int32) { %>'<% } %>" + <%= GetMemberVariableName(columns[j].Name) %><% if (columns[j].DataType == DbType.DateTime) { %>.ToString("yyyy-MM-dd HH:mm:ss.fff")<% } %> + "<% if (columns[j].DataType != DbType.Int32) { %>'<% } %><% if (j < columns.Count -1) { %> and <% } %><% } %>");
			}
		}
		
<% }

TableKeySchemaCollection pfkeys = GetDepedentsOf(SourceTable);
for(int i = 0; i < pfkeys.Count; i++) {
	List<string> names = new List<string>(pfkeys[i].PrimaryKeyMemberColumns.Count);
	List<string> queryNames = new List<string>(pfkeys[i].PrimaryKeyMemberColumns.Count);
	MemberColumnSchemaCollection columns = pfkeys[i].PrimaryKeyMemberColumns;
	MemberColumnSchemaCollection fcolumns = pfkeys[i].ForeignKeyMemberColumns;
	
	string fcollectionClassName = GetCollectionClassName(pfkeys[i].ForeignKeyTable.Name);
	string fclassName = GetClassName(pfkeys[i].ForeignKeyTable.Name);
	bool manyToOne = IsRelationManyToOne(pfkeys[i]);
	
	foreach(MemberColumnSchema s in fcolumns) {
		names.Add(s.Name);
	}
	
	string methodName1 = String.Join("And", names.ToArray());
	
	// clear the names from the list
	names.Clear();
	
	foreach(MemberColumnSchema s in columns) {
		names.Add(s.Name);
	}
			
	string methodName2 = String.Join("And", names.ToArray());%>
		[Browsable(false)]
		public <% if (manyToOne) { %><%= fclassName %><% } else { %><%= fcollectionClassName %><% } %> <%= fclassName %><% if (manyToOne == false) { %>s<% } %>With<%= methodName1 %>For<%= methodName2 %>
		{
			get 
			{
				return <%= fclassName %>.<% if (manyToOne) { %>GetFirst<% } else { %>GetList<% } %>("<% for (int j = 0; j < columns.Count; j++) { %><%= fcolumns[j].Name %> = <% if (columns[j].DataType != DbType.Int32) { %>'<% } %>" + <%= GetMemberVariableName(columns[j].Name) %><% if (columns[j].DataType == DbType.DateTime) { %>.ToString("yyyy-MM-dd HH:mm:ss.fff")<% } %> + "<% if (columns[j].DataType != DbType.Int32) { %>'<% } %><% if (j < columns.Count -1) { %> and <% } %><% } %>");
			}
		}
		
<% } %>
		#endregion
		
<% for (int x = 0; x < cols.Count; x++) { %>
		/// <summary>Gets<% if (IsIdentityColumn(cols[x]) == false && cols[x].IsPrimaryKeyMember == false) { %> or sets<% } %> the <%= GetPropertyName(cols[x].Name) %> value for the column.</summary>
		/// <remarks><%=cols[x].Description%></remarks>
		/// <value>This type is <%=cols[x].NativeType%></value>
<% if (IsIdentityColumn(cols[x]) || cols[x].IsPrimaryKeyMember) { %>
		[ReadOnly(true)]
<% } %>
		[Description("<%=cols[x].Description%>")]
		[DataObjectField(<%= cols[x].IsPrimaryKeyMember.ToString().ToLower() %>, <%= cols[x].IsUnique.ToString().ToLower() %>, <%= cols[x].AllowDBNull.ToString().ToLower() %>, <%= cols[x].Size %>)]
		public <%= GetCSType(cols[x])%> <%= GetPropertyName(cols[x].Name) %>
		{
			get { return this.<%= GetMemberVariableName(cols[x]) %>; }
<% if (IsIdentityColumn(cols[x]) == false && cols[x].IsPrimaryKeyMember == false) { %>
			set
			{
				if (<%= GetMemberVariableName(cols[x]) %> == value)
					return;
					
				<%= GetMemberVariableName(cols[x].Name) %> = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
	<% } %>
		}
		
<% } %>

		private bool _autoUpdate = true;
		/// <summary>True if the entity should commit changes as soon as they are made.</summary>
		[Browsable(false)]
		public bool AutoUpdate
		{
			get { return this._autoUpdate; }
			set { _autoUpdate = value; }
		}

		private bool _isMarkedForDeletion = false;
		/// <summary>Gets if the object has been <see cref="MarkToDelete"/>.</summary>
		[Browsable(false)]
		public bool IsMarkedForDeletion
		{
			get { return this._isMarkedForDeletion; }
		}

		private bool _isDirty = false;
		/// <summary>Indicates if the object has been modified from its original state.</summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[Browsable(false)]
		public bool IsDirty
		{
			get { return this._isDirty; }
		}

		private bool _isNew = false;
		/// <summary>Indicates if the object is new.</summary>
		///<value>True if objectis new; otherwise False;</value>
		[Browsable(false)]
		public bool IsNew
		{
			get { return this._isNew; }
		}

		/// <summary>Gets a value indicating if AutoUpdate is allowed on this entity.</summary>
		private bool AllowAutoUpdate 
		{
			get { return (!IsNew && !IsMarkedForDeletion) && AutoUpdate; }
		}

		#endregion
		
		#region Methods
		
		internal void Merge (<%= className %> entity)
		{
<% for (int x=0; x < cols.Count; x++) { %>
			this.<%= GetMemberVariableName(cols[x]) %> = entity.<%= GetMemberVariableName(cols[x].Name) %>;
<% } %>
		}

		/// <summary>Begin the update process.</summary>
		public void BeginUpdate()
		{
			this.AutoUpdate = false;
		}
		
		/// <summary>End the update process and commit changes.</summary>
		public void EndUpdate()
		{
			this.EndUpdate(true);
		}
		
		/// <summary>End the update process</summary>
		public void EndUpdate(bool commit)
		{
			this.AutoUpdate = true;
			
			if (commit)
				this.CommitChanges();
		}
		
		/// <summary>Accepts the changes made to this object by setting each flags to false.</summary>
		internal void AcceptChanges()
		{
			this._isMarkedForDeletion = false;
			this._isDirty = false;
			this._isNew = false;
		}
		
		///<summary>Currently not supported.</summary>
		public void CancelChanges()
		{
			throw new NotSupportedException("Cancel changes is not currently supported.");
		}
		
		///<summary>Delete this entity.</summary>
		public void Delete()
		{
			this._isMarkedForDeletion = true;
			
			if (!IsNew && AutoUpdate) Delete(this);
		}
		
		#endregion
		
		#region ITable<<%= GetCSType(SourceTable.PrimaryKey.MemberColumns[0]) %>> Members

		[DataObjectField(true, true, false)]
		<%= GetCSType(SourceTable.PrimaryKey.MemberColumns[0]) %> ITable<<%= GetCSType(SourceTable.PrimaryKey.MemberColumns[0]) %>>.PrimaryKey
		{
			get { return <%=GetMemberVariableName(SourceTable.PrimaryKey.MemberColumns[0])%>; }
		}

		/// <summary>Commit the changes to the database.</summary>
		public void CommitChanges()
		{
			if (this.IsNew)
				Insert(this);
			
			else if (this.IsMarkedForDeletion)
				Delete(this);
				
			else if (this.IsDirty)
				Update(this);
		}

		#endregion
	}
	
<% }

if (this.GenerateEnums && generateEnum) { %>
	#region <%= className %> Values
	
	<% 
	DbType type = SourceTable.PrimaryKey.MemberColumns[0].DataType;
	if (type == DbType.Byte
		|| type == DbType.SByte
		|| type == DbType.Int16
		|| type == DbType.UInt16
		|| type == DbType.Int32
		|| type == DbType.UInt32
		|| type == DbType.Int64
		|| type == DbType.UInt64) { %>
	///<summary>
	/// <%=SourceTable.Description%>
	///</summary>
	/// <remark>This enumeration contains the values contained in the table <%=SourceTable.Name%></remark>
	public enum <%= className %>Value : <%= GetCSType(SourceTable.PrimaryKey.MemberColumns[0]) %>
	{
	<%	DataTable datas = SourceTable.GetTableData();
	for(int i=0; i<datas.Rows.Count; i++)
	{
		DataRow row = datas.Rows[i];
		if (datas.Columns.Count > 2) { %>
		/// <summary><%= row["Description"] %></summary>
		<% } %>
		<%= row["Name"].ToString().Trim().Replace(" ", String.Empty).Replace("-", String.Empty).Replace("%", String.Empty).Replace("/", String.Empty).Replace("$", String.Empty) %> = <%= row[0] %><% if (i < datas.Rows.Count -1) { Response.Write("," + Environment.NewLine); } %> 
	<% } %>
	}
	<% } else { %>
	///<summary>
	/// <%=SourceTable.Description%>
	///</summary>
	/// <remark>This enumeration contains the values contained in the table <%=SourceTable.Name%></remark>
	public static partial class <%= className %>Value
	{
	<%	DataTable datas = SourceTable.GetTableData();
	for(int i=0; i<datas.Rows.Count; i++)
	{
		DataRow row = datas.Rows[i];
		if (datas.Columns.Count > 2) { %>
		/// <summary><%= row["Description"] %></summary>
		<% } %>
		public static readonly <%= GetCSType(SourceTable.PrimaryKey.MemberColumns[0]) %> <%= row["Name"].ToString().Trim().Replace(" ", String.Empty).Replace("-", String.Empty).Replace("%", String.Empty).Replace("/", String.Empty).Replace("$", String.Empty) %> = new <%= GetCSType(SourceTable.PrimaryKey.MemberColumns[0]) %>("<%= row[0] %>");
		 
	<% } %>
	}
	<% } %>
	
	#endregion

<% } 

if (this.GenerateTables && generateTable) { %>
	#region <%= className %> Columns
	
	public enum <%= className %>Column
	{
<% for (int i = 0; i < cols.Count; i++) { %>
		/// <summary><%= cols[i].Description %></summary>
		<%= GetPropertyName(cols[i].Name) %><% if(i < cols.Count -1) { Response.Write("," + Environment.NewLine); } %> 
<% } %>
	}
	
	#endregion
	
	#region <%= className %> Collection
	
	public class <%= collectionClassName %> : TableCollection<<%= GetCSType(SourceTable.PrimaryKey.MemberColumns[0]) %>, <%= className %>>
	{
	}
	
	#endregion
}
<% } %>