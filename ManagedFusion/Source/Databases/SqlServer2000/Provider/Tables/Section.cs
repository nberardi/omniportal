/*
 * 	Template:		This code was generated by the ManagedFusion [http://www.managedfusion.com] Data Layer Template.
 * 	Created On :	11/22/2006
 * 	Remarks:		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Diagnostics;
using System.Text;
using System.Threading;
using System.Security.Permissions;
using System.Xml;
using System.Xml.Serialization;

namespace ManagedFusion.Data.SqlServer2000
{
	[DataObject(true)]
	public partial class Section : ITable<int>
	{
		#region Static Methods
		
		#region Common Methods

		protected static SectionCollection FillCollection (SqlCommand command)
		{
			SectionCollection list = new SectionCollection();
			
			try
			{
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						int[] order = new int[15];
						order[0] = reader.GetOrdinal("SectionID");
						order[1] = reader.GetOrdinal("ParentSectionID");
						order[2] = reader.GetOrdinal("CommunityID");
						order[3] = reader.GetOrdinal("Name");
						order[4] = reader.GetOrdinal("Description");
						order[5] = reader.GetOrdinal("Touched");
						order[6] = reader.GetOrdinal("SortOrder");
						order[7] = reader.GetOrdinal("IsEnabled");
						order[8] = reader.GetOrdinal("IsVisible");
						order[9] = reader.GetOrdinal("SyndicateFeed");
						order[10] = reader.GetOrdinal("SyndicateSitemap");
						order[11] = reader.GetOrdinal("Owner");
						order[12] = reader.GetOrdinal("ModuleID");
						order[13] = reader.GetOrdinal("Theme");
						order[14] = reader.GetOrdinal("Style");

						while (reader.Read()) 
						{
							Section entity = new Section();
							entity._sectionID = reader.IsDBNull(0) ? 0 :  reader.GetInt32(order[0]); // SectionID
							entity._parentSectionID = reader.IsDBNull(1) ? 0 :  reader.GetInt32(order[1]); // ParentSectionID
							entity._communityID = reader.IsDBNull(2) ? 0 :  reader.GetInt32(order[2]); // CommunityID
							entity._name = reader.IsDBNull(3) ? String.Empty :  reader.GetString(order[3]); // Name
							entity._description = reader.IsDBNull(4) ? (string)null :  reader.GetString(order[4]); // Description
							entity._touched = reader.IsDBNull(5) ? (DateTime)SqlDateTime.MinValue :  reader.GetDateTime(order[5]); // Touched
							entity._sortOrder = reader.IsDBNull(6) ? 0 :  reader.GetInt32(order[6]); // SortOrder
							entity._isEnabled = reader.IsDBNull(7) ? false :  reader.GetBoolean(order[7]); // IsEnabled
							entity._isVisible = reader.IsDBNull(8) ? false :  reader.GetBoolean(order[8]); // IsVisible
							entity._syndicateFeed = reader.IsDBNull(9) ? false :  reader.GetBoolean(order[9]); // SyndicateFeed
							entity._syndicateSitemap = reader.IsDBNull(10) ? false :  reader.GetBoolean(order[10]); // SyndicateSitemap
							entity._owner = reader.IsDBNull(11) ? String.Empty :  reader.GetString(order[11]); // Owner
							entity._moduleID = reader.IsDBNull(12) ? Guid.Empty :  reader.GetGuid(order[12]); // ModuleID
							entity._theme = reader.IsDBNull(13) ? String.Empty :  reader.GetString(order[13]); // Theme
							entity._style = reader.IsDBNull(14) ? String.Empty :  reader.GetString(order[14]); // Style

							// add to list
							list.Add(entity);
						}
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				command.Connection.Close();
			}
					
			return list;
		}
	
		protected static Section FillEntity (SqlCommand command)
		{
			Section entity = null;
			
			try
			{
				command.Connection.Open();
				using(SqlDataReader reader = command.ExecuteReader())
				{
					if (reader.HasRows)
					{
						reader.Read();
						entity = new Section();
						entity._sectionID = reader.IsDBNull(0) ? 0 :  reader.GetInt32(reader.GetOrdinal("SectionID"));
						entity._parentSectionID = reader.IsDBNull(1) ? 0 :  reader.GetInt32(reader.GetOrdinal("ParentSectionID"));
						entity._communityID = reader.IsDBNull(2) ? 0 :  reader.GetInt32(reader.GetOrdinal("CommunityID"));
						entity._name = reader.IsDBNull(3) ? String.Empty :  reader.GetString(reader.GetOrdinal("Name"));
						entity._description = reader.IsDBNull(4) ? (string)null :  reader.GetString(reader.GetOrdinal("Description"));
						entity._touched = reader.IsDBNull(5) ? (DateTime)SqlDateTime.MinValue :  reader.GetDateTime(reader.GetOrdinal("Touched"));
						entity._sortOrder = reader.IsDBNull(6) ? 0 :  reader.GetInt32(reader.GetOrdinal("SortOrder"));
						entity._isEnabled = reader.IsDBNull(7) ? false :  reader.GetBoolean(reader.GetOrdinal("IsEnabled"));
						entity._isVisible = reader.IsDBNull(8) ? false :  reader.GetBoolean(reader.GetOrdinal("IsVisible"));
						entity._syndicateFeed = reader.IsDBNull(9) ? false :  reader.GetBoolean(reader.GetOrdinal("SyndicateFeed"));
						entity._syndicateSitemap = reader.IsDBNull(10) ? false :  reader.GetBoolean(reader.GetOrdinal("SyndicateSitemap"));
						entity._owner = reader.IsDBNull(11) ? String.Empty :  reader.GetString(reader.GetOrdinal("Owner"));
						entity._moduleID = reader.IsDBNull(12) ? Guid.Empty :  reader.GetGuid(reader.GetOrdinal("ModuleID"));
						entity._theme = reader.IsDBNull(13) ? String.Empty :  reader.GetString(reader.GetOrdinal("Theme"));
						entity._style = reader.IsDBNull(14) ? String.Empty :  reader.GetString(reader.GetOrdinal("Style"));
					}
				}
			} catch (Exception exc) {
				Debug.WriteLine(exc);
			} finally {
				if (entity == null) 
					entity = new Section();
					
				command.Connection.Close();
			}
					
			return entity;
		}
		
		#endregion
		
		#region Get List
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static SectionCollection GetList (string where, string orderBy)
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select * from [Section] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillCollection(command);
				}
			}
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static SectionCollection GetList (string where)
		{
			return GetList(where, String.Empty);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, true)]
		public static SectionCollection GetList ()
		{
			return GetList(String.Empty, String.Empty);
		}
		
		#endregion
		
		#region Get First
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Section GetFirst (string where, string orderBy)
		{
			StringBuilder sb = new StringBuilder(10);
			
			sb.Append(@"select top 1 * from [Section] ");
			
			if (String.IsNullOrEmpty(where) == false)
			{
				sb.Append(" where ");
				sb.Append("(");
				sb.Append(where);
				sb.Append(")");
			}
			
			if (String.IsNullOrEmpty(orderBy) == false)
			{
				sb.Append(" order by ");
				sb.Append(orderBy);
			}
			
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = sb.ToString();
					command.CommandType = CommandType.Text;
					
					return FillEntity(command);
				}
			}
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Section GetFirst (string where)
		{
			return GetFirst(where, String.Empty);
		}
	
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Section GetFirst ()
		{
			return GetFirst(String.Empty, String.Empty);
		}
		
		#endregion
		
		#region Get Latest
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Section GetLatest (string where)
		{
			return GetFirst(where, "ModifiedDT desc");
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Section GetLatest ()
		{
			return GetLatest(String.Empty);
		}
		
		#endregion
		
		#region Get By Foreign Key
		
		#endregion
		
		#region Get By Index
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Section GetBySectionID(int sectionID, string orderBy)
		{
			return GetFirst("SectionID = " + sectionID + "", orderBy);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static Section GetBySectionID(int sectionID)
		{
			return GetBySectionID(sectionID, String.Empty);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static SectionCollection GetByParentSectionID(int parentSectionID, string orderBy)
		{
			return GetList("ParentSectionID = " + parentSectionID + "", orderBy);
		}
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
		public static SectionCollection GetByParentSectionID(int parentSectionID)
		{
			return GetByParentSectionID(parentSectionID, String.Empty);
		}
		
		#endregion

		#region Insert
		
		protected static bool InsertOrUpdate (int sectionID, int parentSectionID, int communityID, string name, string description, DateTime touched, int sortOrder, bool isEnabled, bool isVisible, bool syndicateFeed, bool syndicateSitemap, string owner, Guid moduleID, string theme, string style)		
		{
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = "ManagedFusion_Section";
					command.CommandType = CommandType.StoredProcedure;
					
					command.Parameters.AddWithValue("@SectionID", sectionID);
					command.Parameters.AddWithValue("@ParentSectionID", parentSectionID);
					command.Parameters.AddWithValue("@CommunityID", communityID);
					command.Parameters.AddWithValue("@Name", name);
					command.Parameters.AddWithValue("@Description", description);
					command.Parameters.AddWithValue("@Touched", touched);
					command.Parameters.AddWithValue("@SortOrder", sortOrder);
					command.Parameters.AddWithValue("@IsEnabled", isEnabled);
					command.Parameters.AddWithValue("@IsVisible", isVisible);
					command.Parameters.AddWithValue("@SyndicateFeed", syndicateFeed);
					command.Parameters.AddWithValue("@SyndicateSitemap", syndicateSitemap);
					command.Parameters.AddWithValue("@Owner", owner);
					command.Parameters.AddWithValue("@ModuleID", moduleID);
					command.Parameters.AddWithValue("@Theme", theme);
					command.Parameters.AddWithValue("@Style", style);
					
					bool success = false;
					
					try
					{
						connection.Open();
						command.ExecuteNonQuery();
					
						success = true;
					} catch (Exception exc) {
						Debug.WriteLine(exc);
						
						success = false;
					} finally {
						connection.Close();
					}
					
					return success;
				}
			}
		}
		
		[DataObjectMethod(DataObjectMethodType.Insert, false)]
		public static bool Insert (int sectionID, int parentSectionID, int communityID, string name, string description, DateTime touched, int sortOrder, bool isEnabled, bool isVisible, bool syndicateFeed, bool syndicateSitemap, string owner, Guid moduleID, string theme, string style)
		{
			return InsertOrUpdate(
				sectionID,
				parentSectionID,
				communityID,
				name,
				description,
				touched,
				sortOrder,
				isEnabled,
				isVisible,
				syndicateFeed,
				syndicateSitemap,
				owner,
				moduleID,
				theme,
				style
			);
		}
		
		[DataObjectMethod(DataObjectMethodType.Insert, true)]
		public static bool Insert (Section entity)
		{
			entity.AcceptChanges();
			return InsertOrUpdate(
				entity.SectionID, 
				entity.ParentSectionID, 
				entity.CommunityID, 
				entity.Name, 
				entity.Description, 
				entity.Touched, 
				entity.SortOrder, 
				entity.IsEnabled, 
				entity.IsVisible, 
				entity.SyndicateFeed, 
				entity.SyndicateSitemap, 
				entity.Owner, 
				entity.ModuleID, 
				entity.Theme, 
				entity.Style
			);
		}
		
		#endregion
		
		#region Update
		
		[DataObjectMethod(DataObjectMethodType.Update, false)]
		public static bool Update (int sectionID, int parentSectionID, int communityID, string name, string description, DateTime touched, int sortOrder, bool isEnabled, bool isVisible, bool syndicateFeed, bool syndicateSitemap, string owner, Guid moduleID, string theme, string style)
		{
			return InsertOrUpdate(
				sectionID,
				parentSectionID,
				communityID,
				name,
				description,
				touched,
				sortOrder,
				isEnabled,
				isVisible,
				syndicateFeed,
				syndicateSitemap,
				owner,
				moduleID,
				theme,
				style
			);
		}
		
		[DataObjectMethod(DataObjectMethodType.Update, true)]
		public static bool Update (Section entity)
		{
			entity.AcceptChanges();
			return InsertOrUpdate(
				entity.SectionID, 
				entity.ParentSectionID, 
				entity.CommunityID, 
				entity.Name, 
				entity.Description, 
				entity.Touched, 
				entity.SortOrder, 
				entity.IsEnabled, 
				entity.IsVisible, 
				entity.SyndicateFeed, 
				entity.SyndicateSitemap, 
				entity.Owner, 
				entity.ModuleID, 
				entity.Theme, 
				entity.Style
				);
		}
		
		#endregion
		
		#region Delete
		
		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public static bool Delete (Section entity)
		{
			entity.AcceptChanges();
			return Delete(
				entity.SectionID
			);
		}

		[DataObjectMethod(DataObjectMethodType.Delete, true)]
		public static bool Delete (int sectionID)
		{
			using(SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["ManagedFusion"].ConnectionString))
			{
				using (SqlCommand command = connection.CreateCommand())
				{
					command.CommandText = "ManagedFusion_Section_Delete";
					command.CommandType = CommandType.StoredProcedure;
					
					command.Parameters.AddWithValue("@SectionID", sectionID);
					
					bool success = false;
					
					try
					{
						connection.Open();
						command.ExecuteNonQuery();
					
						success = true;
					} catch (Exception exc) {
						Debug.WriteLine(exc);
						
						success = false;
					} finally {
						connection.Close();
					}
					
					return success;
				}
			}
		}
		
		#endregion

		#endregion
		
		#region Column Variables
		
		#region Primary key(s)
		
		/// <summary>			
		/// Column SectionID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Section"</remarks>
		private int _sectionID = 0;

		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// Column ParentSectionID : 
		/// </summary>
		private int _parentSectionID = 0;

		/// <summary>
		/// Column CommunityID : 
		/// </summary>
		private int _communityID = 0;

		/// <summary>
		/// Column Name : 
		/// </summary>
		private string _name = String.Empty;

		/// <summary>
		/// Column Description : 
		/// </summary>
		private string _description = (string)null;

		/// <summary>
		/// Column Touched : 
		/// </summary>
		private DateTime _touched = (DateTime)SqlDateTime.MinValue;

		/// <summary>
		/// Column SortOrder : 
		/// </summary>
		private int _sortOrder = 0;

		/// <summary>
		/// Column IsEnabled : 
		/// </summary>
		private bool _isEnabled = false;

		/// <summary>
		/// Column IsVisible : 
		/// </summary>
		private bool _isVisible = false;

		/// <summary>
		/// Column SyndicateFeed : 
		/// </summary>
		private bool _syndicateFeed = false;

		/// <summary>
		/// Column SyndicateSitemap : 
		/// </summary>
		private bool _syndicateSitemap = false;

		/// <summary>
		/// Column Owner : 
		/// </summary>
		private string _owner = String.Empty;

		/// <summary>
		/// Column ModuleID : 
		/// </summary>
		private Guid _moduleID = Guid.Empty;

		/// <summary>
		/// Column Theme : 
		/// </summary>
		private string _theme = String.Empty;

		/// <summary>
		/// Column Style : 
		/// </summary>
		private string _style = String.Empty;

		#endregion
		
		#endregion
		
		#region Constructor
		
		///<summary>
		/// Creates a new <see cref="Section"/> instance.
		///</summary>
		///<param name="SectionID"></param>
		///<param name="ParentSectionID"></param>
		///<param name="CommunityID"></param>
		///<param name="Name"></param>
		///<param name="Description"></param>
		///<param name="Touched"></param>
		///<param name="SortOrder"></param>
		///<param name="IsEnabled"></param>
		///<param name="IsVisible"></param>
		///<param name="SyndicateFeed"></param>
		///<param name="SyndicateSitemap"></param>
		///<param name="Owner"></param>
		///<param name="ModuleID"></param>
		///<param name="Theme"></param>
		///<param name="Style"></param>
		public Section (int parentSectionID, int communityID, string name, string description, DateTime touched, int sortOrder, bool isEnabled, bool isVisible, bool syndicateFeed, bool syndicateSitemap, string owner, Guid moduleID, string theme, string style)
		{
			this._isMarkedForDeletion = false;
			this._isDirty = true;
			this._isNew = true;
			this._autoUpdate = true;
				
			this._parentSectionID = parentSectionID;
			this._communityID = communityID;
			this._name = name;
			this._description = description;
			this._touched = touched;
			this._sortOrder = sortOrder;
			this._isEnabled = isEnabled;
			this._isVisible = isVisible;
			this._syndicateFeed = syndicateFeed;
			this._syndicateSitemap = syndicateSitemap;
			this._owner = owner;
			this._moduleID = moduleID;
			this._theme = theme;
			this._style = style;
		}
		
		public Section ()
		{
			this._isMarkedForDeletion = false;
			this._isDirty = false;
			this._isNew = true;
			this._autoUpdate = true;
		}
		
		#endregion
		
		#region Properties
		
		#region Foreign Keys
		
		[Browsable(false)]
		public SectionContainerLinkCollection SectionContainerLinksWithSectionIDForSectionID
		{
			get 
			{
				return SectionContainerLink.GetList("SectionID = " + _sectionID + "");
			}
		}
		
		[Browsable(false)]
		public SectionPropertyCollection SectionPropertysWithSectionIDForSectionID
		{
			get 
			{
				return SectionProperty.GetList("SectionID = " + _sectionID + "");
			}
		}
		
		[Browsable(false)]
		public SectionRoleCollection SectionRolesWithSectionIDForSectionID
		{
			get 
			{
				return SectionRole.GetList("SectionID = " + _sectionID + "");
			}
		}
		
		[Browsable(false)]
		public SiteCollection SitesWithSectionIDForSectionID
		{
			get 
			{
				return Site.GetList("SectionID = " + _sectionID + "");
			}
		}
		
		#endregion
		
		/// <summary>Gets the SectionID value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is int</value>
		[ReadOnly(true)]
		[Description("")]
		[DataObjectField(true, true, false, 4)]
		public int SectionID
		{
			get { return this._sectionID; }
		}
		
		/// <summary>Gets or sets the ParentSectionID value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is int</value>
		[Description("")]
		[DataObjectField(false, false, false, 4)]
		public int ParentSectionID
		{
			get { return this._parentSectionID; }
			set
			{
				if (_parentSectionID == value)
					return;
					
				_parentSectionID = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the CommunityID value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is int</value>
		[Description("")]
		[DataObjectField(false, false, false, 4)]
		public int CommunityID
		{
			get { return this._communityID; }
			set
			{
				if (_communityID == value)
					return;
					
				_communityID = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Name value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is nvarchar</value>
		[Description("")]
		[DataObjectField(false, false, false, 32)]
		public string Name
		{
			get { return this._name; }
			set
			{
				if (_name == value)
					return;
					
				_name = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Description value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is nvarchar</value>
		[Description("")]
		[DataObjectField(false, false, true, 128)]
		public string Description
		{
			get { return this._description; }
			set
			{
				if (_description == value)
					return;
					
				_description = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Touched value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is datetime</value>
		[Description("")]
		[DataObjectField(false, false, false, 8)]
		public DateTime Touched
		{
			get { return this._touched; }
			set
			{
				if (_touched == value)
					return;
					
				_touched = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the SortOrder value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is int</value>
		[Description("")]
		[DataObjectField(false, false, false, 4)]
		public int SortOrder
		{
			get { return this._sortOrder; }
			set
			{
				if (_sortOrder == value)
					return;
					
				_sortOrder = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the IsEnabled value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is bit</value>
		[Description("")]
		[DataObjectField(false, false, false, 1)]
		public bool IsEnabled
		{
			get { return this._isEnabled; }
			set
			{
				if (_isEnabled == value)
					return;
					
				_isEnabled = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the IsVisible value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is bit</value>
		[Description("")]
		[DataObjectField(false, false, false, 1)]
		public bool IsVisible
		{
			get { return this._isVisible; }
			set
			{
				if (_isVisible == value)
					return;
					
				_isVisible = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the SyndicateFeed value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is bit</value>
		[Description("")]
		[DataObjectField(false, false, false, 1)]
		public bool SyndicateFeed
		{
			get { return this._syndicateFeed; }
			set
			{
				if (_syndicateFeed == value)
					return;
					
				_syndicateFeed = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the SyndicateSitemap value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is bit</value>
		[Description("")]
		[DataObjectField(false, false, false, 1)]
		public bool SyndicateSitemap
		{
			get { return this._syndicateSitemap; }
			set
			{
				if (_syndicateSitemap == value)
					return;
					
				_syndicateSitemap = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Owner value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is nvarchar</value>
		[Description("")]
		[DataObjectField(false, false, false, 32)]
		public string Owner
		{
			get { return this._owner; }
			set
			{
				if (_owner == value)
					return;
					
				_owner = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the ModuleID value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is uniqueidentifier</value>
		[Description("")]
		[DataObjectField(false, false, false, 16)]
		public Guid ModuleID
		{
			get { return this._moduleID; }
			set
			{
				if (_moduleID == value)
					return;
					
				_moduleID = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Theme value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is nvarchar</value>
		[Description("")]
		[DataObjectField(false, false, false, 64)]
		public string Theme
		{
			get { return this._theme; }
			set
			{
				if (_theme == value)
					return;
					
				_theme = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		
		/// <summary>Gets or sets the Style value for the column.</summary>
		/// <remarks></remarks>
		/// <value>This type is nvarchar</value>
		[Description("")]
		[DataObjectField(false, false, false, 64)]
		public string Style
		{
			get { return this._style; }
			set
			{
				if (_style == value)
					return;
					
				_style = value;
				this._isDirty = true;
				
				// if auto update is turned on update this
				if (AllowAutoUpdate) Update(this);
			}
		}
		

		private bool _autoUpdate = true;
		/// <summary>True if the entity should commit changes as soon as they are made.</summary>
		[Browsable(false)]
		public bool AutoUpdate
		{
			get { return this._autoUpdate; }
			set { _autoUpdate = value; }
		}

		private bool _isMarkedForDeletion = false;
		/// <summary>Gets if the object has been <see cref="MarkToDelete"/>.</summary>
		[Browsable(false)]
		public bool IsMarkedForDeletion
		{
			get { return this._isMarkedForDeletion; }
		}

		private bool _isDirty = false;
		/// <summary>Indicates if the object has been modified from its original state.</summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[Browsable(false)]
		public bool IsDirty
		{
			get { return this._isDirty; }
		}

		private bool _isNew = false;
		/// <summary>Indicates if the object is new.</summary>
		///<value>True if objectis new; otherwise False;</value>
		[Browsable(false)]
		public bool IsNew
		{
			get { return this._isNew; }
		}

		/// <summary>Gets a value indicating if AutoUpdate is allowed on this entity.</summary>
		private bool AllowAutoUpdate 
		{
			get { return (!IsNew && !IsMarkedForDeletion) && AutoUpdate; }
		}

		#endregion
		
		#region Methods
		
		internal void Merge (Section entity)
		{
			this._sectionID = entity._sectionID;
			this._parentSectionID = entity._parentSectionID;
			this._communityID = entity._communityID;
			this._name = entity._name;
			this._description = entity._description;
			this._touched = entity._touched;
			this._sortOrder = entity._sortOrder;
			this._isEnabled = entity._isEnabled;
			this._isVisible = entity._isVisible;
			this._syndicateFeed = entity._syndicateFeed;
			this._syndicateSitemap = entity._syndicateSitemap;
			this._owner = entity._owner;
			this._moduleID = entity._moduleID;
			this._theme = entity._theme;
			this._style = entity._style;
		}

		/// <summary>Begin the update process.</summary>
		public void BeginUpdate()
		{
			this.AutoUpdate = false;
		}
		
		/// <summary>End the update process and commit changes.</summary>
		public void EndUpdate()
		{
			this.EndUpdate(true);
		}
		
		/// <summary>End the update process</summary>
		public void EndUpdate(bool commit)
		{
			this.AutoUpdate = true;
			
			if (commit)
				this.CommitChanges();
		}
		
		/// <summary>Accepts the changes made to this object by setting each flags to false.</summary>
		internal void AcceptChanges()
		{
			this._isMarkedForDeletion = false;
			this._isDirty = false;
			this._isNew = false;
		}
		
		///<summary>Currently not supported.</summary>
		public void CancelChanges()
		{
			throw new NotSupportedException("Cancel changes is not currently supported.");
		}
		
		///<summary>Delete this entity.</summary>
		public void Delete()
		{
			this._isMarkedForDeletion = true;
			
			if (!IsNew && AutoUpdate) Delete(this);
		}
		
		#endregion
		
		#region ITable<int> Members

		[DataObjectField(true, true, false)]
		int ITable<int>.PrimaryKey
		{
			get { return _sectionID; }
		}

		/// <summary>Commit the changes to the database.</summary>
		public void CommitChanges()
		{
			if (this.IsNew)
				Insert(this);
			
			else if (this.IsMarkedForDeletion)
				Delete(this);
				
			else if (this.IsDirty)
				Update(this);
		}

		#endregion
	}
	
	#region Section Columns
	
	public enum SectionColumn
	{
		/// <summary></summary>
		SectionID,
 
		/// <summary></summary>
		ParentSectionID,
 
		/// <summary></summary>
		CommunityID,
 
		/// <summary></summary>
		Name,
 
		/// <summary></summary>
		Description,
 
		/// <summary></summary>
		Touched,
 
		/// <summary></summary>
		SortOrder,
 
		/// <summary></summary>
		IsEnabled,
 
		/// <summary></summary>
		IsVisible,
 
		/// <summary></summary>
		SyndicateFeed,
 
		/// <summary></summary>
		SyndicateSitemap,
 
		/// <summary></summary>
		Owner,
 
		/// <summary></summary>
		ModuleID,
 
		/// <summary></summary>
		Theme,
 
		/// <summary></summary>
		Style 
	}
	
	#endregion
	
	#region Section Collection
	
	public class SectionCollection : TableCollection<int, Section>
	{
	}
	
	#endregion
}